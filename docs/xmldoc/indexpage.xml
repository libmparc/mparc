<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>MPARC</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="index_1md_README"/> <image type="html" name="logo.png" inline="yes">Logo is the MPARC archive behind an #ffffff background lmao</image>
<image type="latex" name="logo.png" inline="yes">Logo is the MPARC archive behind an #ffffff background lmao</image>
<image type="rtf" name="logo.png" inline="yes">Logo is the MPARC archive behind an #ffffff background lmao</image>
<image type="docbook" name="logo.png" inline="yes">Logo is the MPARC archive behind an #ffffff background lmao</image>
</para>
<para>MPAR archive reimplemented in C instead of C++, more advanced than before.</para>
<sect1 id="index_1autotoc_md1">
<title>Enough of the boring stuff</title>
<sect2 id="index_1autotoc_md2">
<title>Why should I use this library and archive format</title>
<para>An archive format, but not just that. <linebreak/>
 It&apos;s in plain text! Not any plain text, ASCII plain text! <linebreak/>
 Even binary files are in plain text because we use Base64 encoding on them!</para>
<para>You can manipulate and extract these archives with a text editor, a crc32 encoder (decoder optional, but good for checks) and a base64 encoder/decoder!</para>
<para>Versatile! You can make it into a key value database store somehow. Can store literal bytes of structs (uh oh endian problems)!</para>
</sect2>
<sect2 id="index_1autotoc_md3">
<title>Why shouldn&apos;t I use this library and archive format</title>
<para><itemizedlist>
<listitem><para>The code I wrote may not be up to quality control. <linebreak/>
</para>
</listitem><listitem><para>This code pulls in libc and uses dynamic allocation. <linebreak/>
</para>
</listitem><listitem><para>Calloc hater? Not for you, this library is proliferated with calloc calls. <linebreak/>
</para>
</listitem><listitem><para>Oh also the archives are bigger than zip or tar as they are binary based and this format is plain text based and plain text files are larger than binary files.</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="index_1autotoc_md4">
<title>Teach me how to build it</title>
<para>You only need libc for standard functions, but (the boehm garbage collector/dmalloc) can be used to debug memory issues.</para>
<para><blockquote><para>Also this can be built with the old makefile (Makefile.dumb) (trust me, I am the old method), <linebreak/>
 </para>
</blockquote>autotools (Less broken, but still yes you need to make it yourself) <linebreak/>
 or CMake (it works, please do it in the build/ directory).</para>
</sect2>
<sect2 id="index_1autotoc_md5">
<title>How can I implement this format in my own method?</title>
<para>Go to <ulink url="./mparc.c">the source code</ulink> and find the MPARC_construct_str function body, <linebreak/>
 there is the instruction there for you on how to construct the archive by hand, <linebreak/>
 you can also use the hand construction instructions to make your own library.</para>
<para>You also know how to parse the file just by looking at the specification on file construction.</para>
<para>Read those instructions, think about parsing it and putting it together and there you have your own library implementation! <linebreak/>
 Or just copy my code and say it is yours (HEY!).</para>
</sect2>
<sect2 id="index_1autotoc_md6">
<title>How can I make bindings to my own language?</title>
<para>You make it yourself, or use <ulink url="./mparc.swigi">SWIG</ulink>!</para>
<para>However, you want C++? You can use the C functions immediately! </para>
</sect2>
</sect1>
    </detaileddescription>
    <location file="README.md"/>
  </compounddef>
</doxygen>
