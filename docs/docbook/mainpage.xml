<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_mainpage" xml:lang="en-US">

<para><anchor xml:id="_index_1md_README"/> 
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata align="center" valign="middle" scalefit="0" fileref="logo.png"></imagedata>
            </imageobject>
Logo is the MPARC archive behind an #ffffff background lmao
        </mediaobject>
    </informalfigure>
</para>

<para>MPAR archive reimplemented in C instead of C++, more advanced than before.</para>
<section xml:id="_index_1autotoc_md1">
<title>Enough of the boring stuff</title>
<section xml:id="_index_1autotoc_md2">
<title>Why should I use this library and archive format</title>

<para>An archive format, but not just that. 
<literallayout>&#160;&#xa;</literallayout>
 It&apos;s in plain text! Not any plain text, ASCII plain text! 
<literallayout>&#160;&#xa;</literallayout>
 Even binary files are in plain text because we use Base64 encoding on them!</para>

<para>You can manipulate and extract these archives with a text editor, a crc32 encoder (decoder optional, but good for checks) and a base64 encoder/decoder!</para>

<para>Versatile! You can make it into a key value database store somehow. Can store literal bytes of structs (uh oh endian problems)!</para>
</section>
<section xml:id="_index_1autotoc_md3">
<title>Why shouldn&apos;t I use this library and archive format</title>

<para><itemizedlist>
<listitem>
<para>The code I wrote may not be up to quality control. 
<literallayout>&#160;&#xa;</literallayout>
</para>
</listitem><listitem>
<para>This code pulls in libc and uses dynamic allocation. 
<literallayout>&#160;&#xa;</literallayout>
</para>
</listitem><listitem>
<para>Calloc hater? Not for you, this library is proliferated with calloc calls. 
<literallayout>&#160;&#xa;</literallayout>
</para>
</listitem><listitem>
<para>Oh also the archives are bigger than zip or tar as they are binary based and this format is plain text based and plain text files are larger than binary files.</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_index_1autotoc_md4">
<title>Teach me how to build it</title>

<para>You only need libc for standard functions, but (the boehm garbage collector/dmalloc) can be used to debug memory issues.</para>

<para><blockquote>
<para>Also this can be built with the old makefile (Makefile.dumb) (trust me, I am the old method), 
<literallayout>&#160;&#xa;</literallayout>
 </para>
</blockquote>autotools (Less broken, but still yes you need to make it yourself) 
<literallayout>&#160;&#xa;</literallayout>
 or CMake (it works, please do it in the build/ directory).</para>
</section>
<section xml:id="_index_1autotoc_md5">
<title>How can I implement this format in my own method?</title>

<para>Go to <link xlink:href="./mparc.c">the source code</link> and find the MPARC_construct_str function body, 
<literallayout>&#160;&#xa;</literallayout>
 there is the instruction there for you on how to construct the archive by hand, 
<literallayout>&#160;&#xa;</literallayout>
 you can also use the hand construction instructions to make your own library.</para>

<para>You also know how to parse the file just by looking at the specification on file construction.</para>

<para>Read those instructions, think about parsing it and putting it together and there you have your own library implementation! 
<literallayout>&#160;&#xa;</literallayout>
 Or just copy my code and say it is yours (HEY!).</para>
</section>
<section xml:id="_index_1autotoc_md6">
<title>How can I make bindings to my own language?</title>

<para>You make it yourself, or use <link xlink:href="./mparc.swigi">SWIG</link>!</para>

<para>However, you want C++? You can use the C functions immediately! </para>
</section>
</section>
</chapter>
