<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.9.6"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>MPARC: lib/mparc.c File Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<link href="../../doxygen-awesome.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">MPARC<span id="projectnumber">&#160;0.1</span>
   </div>
   <div id="projectbrief">Dumb plain text based archive format in C</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.6 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(document).ready(function(){initNavTree('d9/dd9/mparc_8c.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Data Structures</a> &#124;
<a href="#define-members">Macros</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle"><div class="title">mparc.c File Reference</div></div>
</div><!--header-->
<div class="contents">

<p>MPARC, A Dumb Archiver Format C Rewrite Of MPAR. C Source File.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &quot;<a class="el" href="../../d6/d08/mparc_8h_source.htm">mparc.h</a>&quot;</code><br />
<code>#include &lt;stdio.h&gt;</code><br />
<code>#include &lt;ctype.h&gt;</code><br />
<code>#include &lt;stdlib.h&gt;</code><br />
<code>#include &lt;string.h&gt;</code><br />
<code>#include &lt;stddef.h&gt;</code><br />
<code>#include &lt;stdarg.h&gt;</code><br />
<code>#include &lt;stdint.h&gt;</code><br />
<code>#include &lt;assert.h&gt;</code><br />
<code>#include &lt;errno.h&gt;</code><br />
<code>#include &lt;inttypes.h&gt;</code><br />
<code>#include &lt;stdbool.h&gt;</code><br />
<code>#include &lt;time.h&gt;</code><br />
</div><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Data Structures</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Not the best place to find documentation for this struct, see <a class="el" href="../../d6/d08/mparc_8h.htm" title="MPARC, A Dumb Archiver Format C Rewrite Of MPAR. Test file.">mparc.h</a> for better info. This however tells you about the members.  <a href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/dd2/struct_m_x_p_s_q_l___m_p_a_r_c__iter__t.htm">MXPSQL_MPARC_iter_t</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Iterator.  <a href="../../d0/dd2/struct_m_x_p_s_q_l___m_p_a_r_c__iter__t.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="define-members" name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:ad57dcf6ba7f1516ed844dec4459b117b"><td class="memItemLeft" align="right" valign="top"><a id="ad57dcf6ba7f1516ed844dec4459b117b" name="ad57dcf6ba7f1516ed844dec4459b117b"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><b>_MXPSQL_MPARC_C</b></td></tr>
<tr class="memdesc:ad57dcf6ba7f1516ed844dec4459b117b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Header guard. <br /></td></tr>
<tr class="separator:ad57dcf6ba7f1516ed844dec4459b117b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a110091ad2aa3030391c1ca09e296af33"><td class="memItemLeft" align="right" valign="top"><a id="a110091ad2aa3030391c1ca09e296af33" name="a110091ad2aa3030391c1ca09e296af33"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><b>MPARC_WANT_EXTERN_AUX_UTIL_FUNCTIONS</b></td></tr>
<tr class="memdesc:a110091ad2aa3030391c1ca09e296af33"><td class="mdescLeft">&#160;</td><td class="mdescRight">I want prototypes of my functions, normally not exposed. <br /></td></tr>
<tr class="separator:a110091ad2aa3030391c1ca09e296af33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a4364cfb3e1d0c4e1ee461bfef7875c"><td class="memItemLeft" align="right" valign="top"><a id="a5a4364cfb3e1d0c4e1ee461bfef7875c" name="a5a4364cfb3e1d0c4e1ee461bfef7875c"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><b>STANKY_MPAR_FILE_FORMAT_MAGIC_NUMBER_25</b>&#160;&#160;&#160;&quot;MXPSQL's Portable Archive&quot;</td></tr>
<tr class="memdesc:a5a4364cfb3e1d0c4e1ee461bfef7875c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Magic number for file format. <br /></td></tr>
<tr class="separator:a5a4364cfb3e1d0c4e1ee461bfef7875c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac81508c80aafaf02a004a59dbff7dcc5"><td class="memItemLeft" align="right" valign="top"><a id="ac81508c80aafaf02a004a59dbff7dcc5" name="ac81508c80aafaf02a004a59dbff7dcc5"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><b>STANKY_MPAR_FILE_FORMAT_VERSION_NUMBER</b>&#160;&#160;&#160;1</td></tr>
<tr class="memdesc:ac81508c80aafaf02a004a59dbff7dcc5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Version number magic. <br /></td></tr>
<tr class="separator:ac81508c80aafaf02a004a59dbff7dcc5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b151a2d2316733527caa1a301f04a2e"><td class="memItemLeft" align="right" valign="top"><a id="a0b151a2d2316733527caa1a301f04a2e" name="a0b151a2d2316733527caa1a301f04a2e"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><b>STANKY_MPAR_FILE_FORMAT_VERSION_HASH_ADDED</b>&#160;&#160;&#160;1</td></tr>
<tr class="memdesc:a0b151a2d2316733527caa1a301f04a2e"><td class="mdescLeft">&#160;</td><td class="mdescRight">False CRC32 Hash number magic. <br /></td></tr>
<tr class="separator:a0b151a2d2316733527caa1a301f04a2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a326f77dcf18011fb94858f1a047eea10"><td class="memItemLeft" align="right" valign="top"><a id="a326f77dcf18011fb94858f1a047eea10" name="a326f77dcf18011fb94858f1a047eea10"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><b>STANKY_MPAR_FILE_FORMAT_VERSION_REPRESENTATION</b>&#160;&#160;&#160;unsigned long long</td></tr>
<tr class="memdesc:a326f77dcf18011fb94858f1a047eea10"><td class="mdescLeft">&#160;</td><td class="mdescRight">Our version representation. <br /></td></tr>
<tr class="separator:a326f77dcf18011fb94858f1a047eea10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a248acd793693666ff78a087923887dfa"><td class="memItemLeft" align="right" valign="top"><a id="a248acd793693666ff78a087923887dfa" name="a248acd793693666ff78a087923887dfa"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><b>MPARC_MAGIC_CHKSM_SEP</b>&#160;&#160;&#160;'%'</td></tr>
<tr class="memdesc:a248acd793693666ff78a087923887dfa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Magic separator for checksum and entry. <br /></td></tr>
<tr class="separator:a248acd793693666ff78a087923887dfa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa13a99948b24fb873e9f89e173acbdcb"><td class="memItemLeft" align="right" valign="top"><a id="aa13a99948b24fb873e9f89e173acbdcb" name="aa13a99948b24fb873e9f89e173acbdcb"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><b>MPARC_DEBUG_CONF_PRINTF_FILE</b>&#160;&#160;&#160;stderr</td></tr>
<tr class="memdesc:aa13a99948b24fb873e9f89e173acbdcb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Where to print to if you want send a message with fprintf debugging. <br /></td></tr>
<tr class="separator:aa13a99948b24fb873e9f89e173acbdcb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b1621e1582ea29e5168ef97ac544868"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a9b1621e1582ea29e5168ef97ac544868">MPARC_QSORT_MODE</a>&#160;&#160;&#160;1</td></tr>
<tr class="separator:a9b1621e1582ea29e5168ef97ac544868"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ad7e18ba758ac0fc4c67b4d963dd119"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a2ad7e18ba758ac0fc4c67b4d963dd119">MPARC_DIRECTF_MINIMUM</a>&#160;&#160;&#160;(8000)</td></tr>
<tr class="memdesc:a2ad7e18ba758ac0fc4c67b4d963dd119"><td class="mdescLeft">&#160;</td><td class="mdescRight">Magic threshold number.  <br /></td></tr>
<tr class="separator:a2ad7e18ba758ac0fc4c67b4d963dd119"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="func-members" name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ad84d7044d4f65ef1385cd7453278aa27"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#ad84d7044d4f65ef1385cd7453278aa27">MPARC_get_last_error</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> **structure, <a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> *out)</td></tr>
<tr class="memdesc:ad84d7044d4f65ef1385cd7453278aa27"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get last error from internally maintained state, the state is sticky. <br  />
 (If one of your functions does not return MXPSQL_MPARC_err, how cruel of you to do that by forcing users to resort to this function).  <br /></td></tr>
<tr class="separator:ad84d7044d4f65ef1385cd7453278aa27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a499191b4f97ceb2791a4861cd493b9d4"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a499191b4f97ceb2791a4861cd493b9d4">MPARC_strerror</a> (<a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> err, char **out)</td></tr>
<tr class="memdesc:a499191b4f97ceb2791a4861cd493b9d4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get error string from MXPSQL_MPARC_err.  <br /></td></tr>
<tr class="separator:a499191b4f97ceb2791a4861cd493b9d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb33c06446b2c32a15eaead47728808c"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#acb33c06446b2c32a15eaead47728808c">MPARC_sfperror</a> (<a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> err, FILE *filepstream, const char *emsg)</td></tr>
<tr class="memdesc:acb33c06446b2c32a15eaead47728808c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print the error message to your stream of choice with a message of your choice.  <br /></td></tr>
<tr class="separator:acb33c06446b2c32a15eaead47728808c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d77b86222a2630f482dc038b149e553"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a0d77b86222a2630f482dc038b149e553">MPARC_fperror</a> (<a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> err, FILE *fileptrstream)</td></tr>
<tr class="memdesc:a0d77b86222a2630f482dc038b149e553"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print the error message of your stream of choice.  <br /></td></tr>
<tr class="separator:a0d77b86222a2630f482dc038b149e553"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5d11cf031a7370f20dd6861746208df"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#ae5d11cf031a7370f20dd6861746208df">MPARC_perror</a> (<a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> err)</td></tr>
<tr class="memdesc:ae5d11cf031a7370f20dd6861746208df"><td class="mdescLeft">&#160;</td><td class="mdescRight">Print the error message to stderr.  <br /></td></tr>
<tr class="separator:ae5d11cf031a7370f20dd6861746208df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fe7a9487c96376771cec41e72f1fbf7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a1fe7a9487c96376771cec41e72f1fbf7">MPARC_init</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> **structure)</td></tr>
<tr class="memdesc:a1fe7a9487c96376771cec41e72f1fbf7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize sturcture.  <br /></td></tr>
<tr class="separator:a1fe7a9487c96376771cec41e72f1fbf7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6da21dcbf030cec0307ad7bfd3ea4f48"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a6da21dcbf030cec0307ad7bfd3ea4f48">MPARC_copy</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> **structure, <a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> **targetdest)</td></tr>
<tr class="memdesc:a6da21dcbf030cec0307ad7bfd3ea4f48"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize structure by copying.  <br /></td></tr>
<tr class="separator:a6da21dcbf030cec0307ad7bfd3ea4f48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a278819906e49b1155ee23cd2f3ad33"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a5a278819906e49b1155ee23cd2f3ad33">MPARC_destroy</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> **structure)</td></tr>
<tr class="memdesc:a5a278819906e49b1155ee23cd2f3ad33"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tear down structure.  <br /></td></tr>
<tr class="separator:a5a278819906e49b1155ee23cd2f3ad33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e0f388381ef42b9660faa483dd858df"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a5e0f388381ef42b9660faa483dd858df">MPARC_cipher</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *structure, bool SetXOR, unsigned char *XORKeyIn, <a class="el" href="../../d6/d08/mparc_8h.htm#a6dd4c5df4f9e32a9e863fc789ebaddfb">MXPSQL_MPARC_uint_repr_t</a> XORKeyLengthIn, unsigned char **XORKeyOut, <a class="el" href="../../d6/d08/mparc_8h.htm#a6dd4c5df4f9e32a9e863fc789ebaddfb">MXPSQL_MPARC_uint_repr_t</a> *XORKeyLengthOut, bool SetROT, int *ROTKeyIn, <a class="el" href="../../d6/d08/mparc_8h.htm#a6dd4c5df4f9e32a9e863fc789ebaddfb">MXPSQL_MPARC_uint_repr_t</a> ROTKeyLengthIn, int **ROTKeyOut, <a class="el" href="../../d6/d08/mparc_8h.htm#a6dd4c5df4f9e32a9e863fc789ebaddfb">MXPSQL_MPARC_uint_repr_t</a> *ROTKeyLengthOut)</td></tr>
<tr class="memdesc:a5e0f388381ef42b9660faa483dd858df"><td class="mdescLeft">&#160;</td><td class="mdescRight">Control cipher encryption;One function to control two ciphers (horrible design)  <br /></td></tr>
<tr class="separator:a5e0f388381ef42b9660faa483dd858df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70b485272c72704901ab0e2c54d40820"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a70b485272c72704901ab0e2c54d40820">MPARC_list_array</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *structure, char ***listout, <a class="el" href="../../d6/d08/mparc_8h.htm#a6dd4c5df4f9e32a9e863fc789ebaddfb">MXPSQL_MPARC_uint_repr_t</a> *length)</td></tr>
<tr class="memdesc:a70b485272c72704901ab0e2c54d40820"><td class="mdescLeft">&#160;</td><td class="mdescRight">List out the current files included as an array.  <br /></td></tr>
<tr class="separator:a70b485272c72704901ab0e2c54d40820"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc033ce1084b6c7e42ebfa2415ccd160"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#abc033ce1084b6c7e42ebfa2415ccd160">MPARC_list_array_free</a> (char ***list)</td></tr>
<tr class="memdesc:abc033ce1084b6c7e42ebfa2415ccd160"><td class="mdescLeft">&#160;</td><td class="mdescRight">Utility function that free the list that you created with MPARC_list_array.  <br /></td></tr>
<tr class="separator:abc033ce1084b6c7e42ebfa2415ccd160"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a984c02b5c1b6a21cfbe863364f78208b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a984c02b5c1b6a21cfbe863364f78208b">MPARC_list_iterator_init</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> **structure, <a class="el" href="../../d0/dd2/struct_m_x_p_s_q_l___m_p_a_r_c__iter__t.htm">MXPSQL_MPARC_iter_t</a> **iterator)</td></tr>
<tr class="memdesc:a984c02b5c1b6a21cfbe863364f78208b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialize the iterator that list the current files included.  <br /></td></tr>
<tr class="separator:a984c02b5c1b6a21cfbe863364f78208b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e2b9d912b91cac836a472009257f732"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a0e2b9d912b91cac836a472009257f732">MPARC_list_iterator_next</a> (<a class="el" href="../../d0/dd2/struct_m_x_p_s_q_l___m_p_a_r_c__iter__t.htm">MXPSQL_MPARC_iter_t</a> **iterator, const char **outnam)</td></tr>
<tr class="memdesc:a0e2b9d912b91cac836a472009257f732"><td class="mdescLeft">&#160;</td><td class="mdescRight">Update the state of the iterator to point to the next one.  <br /></td></tr>
<tr class="separator:a0e2b9d912b91cac836a472009257f732"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af69cf2c23d9a3d0f4a175c7c1dc8af2e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#af69cf2c23d9a3d0f4a175c7c1dc8af2e">MPARC_list_iterator_destroy</a> (<a class="el" href="../../d0/dd2/struct_m_x_p_s_q_l___m_p_a_r_c__iter__t.htm">MXPSQL_MPARC_iter_t</a> **iterator)</td></tr>
<tr class="memdesc:af69cf2c23d9a3d0f4a175c7c1dc8af2e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroy the iterator.  <br /></td></tr>
<tr class="separator:af69cf2c23d9a3d0f4a175c7c1dc8af2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a447ddf276fb30e5722e79b5997814271"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a447ddf276fb30e5722e79b5997814271">MPARC_list_foreach</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *structure, bool *cb_aborted, <a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>(*callback)(<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *, const char *, void *), void *cb_ctx)</td></tr>
<tr class="memdesc:a447ddf276fb30e5722e79b5997814271"><td class="mdescLeft">&#160;</td><td class="mdescRight">Foreach, with call backs.  <br /></td></tr>
<tr class="separator:a447ddf276fb30e5722e79b5997814271"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8ef340b41eb2b0e988fd6a2dd76c5cc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#ae8ef340b41eb2b0e988fd6a2dd76c5cc">MPARC_exists</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *structure, const char *filename)</td></tr>
<tr class="memdesc:ae8ef340b41eb2b0e988fd6a2dd76c5cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check if file entry exists.  <br /></td></tr>
<tr class="separator:ae8ef340b41eb2b0e988fd6a2dd76c5cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8926502591fce41f1b6313e004df11c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#af8926502591fce41f1b6313e004df11c">MPARC_push_ufilestr_advance</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *structure, const char *filename, bool stripdir, bool overwrite, unsigned char *ustringc, <a class="el" href="../../d6/d08/mparc_8h.htm#a6dd4c5df4f9e32a9e863fc789ebaddfb">MXPSQL_MPARC_uint_repr_t</a> sizy)</td></tr>
<tr class="memdesc:af8926502591fce41f1b6313e004df11c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Push an unsigned string as a file.  <br /></td></tr>
<tr class="separator:af8926502591fce41f1b6313e004df11c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8639e49b467fd1322682fc75df57a83c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a8639e49b467fd1322682fc75df57a83c">MPARC_push_ufilestr</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *structure, const char *filename, unsigned char *ustringc, <a class="el" href="../../d6/d08/mparc_8h.htm#a6dd4c5df4f9e32a9e863fc789ebaddfb">MXPSQL_MPARC_uint_repr_t</a> sizy)</td></tr>
<tr class="memdesc:a8639e49b467fd1322682fc75df57a83c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simple version of MPARC_push_ufilestr_advance that does not strip the directory name.  <br /></td></tr>
<tr class="separator:a8639e49b467fd1322682fc75df57a83c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e326d95791906a75532c4ef8be59d9a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a1e326d95791906a75532c4ef8be59d9a">MPARC_push_voidfile</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *structure, const char *filename, void *buffer_guffer, <a class="el" href="../../d6/d08/mparc_8h.htm#a6dd4c5df4f9e32a9e863fc789ebaddfb">MXPSQL_MPARC_uint_repr_t</a> sizey)</td></tr>
<tr class="memdesc:a1e326d95791906a75532c4ef8be59d9a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Push a void pointer as a file.  <br /></td></tr>
<tr class="separator:a1e326d95791906a75532c4ef8be59d9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8028a20dc77814394bb16b58e4a93be"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#ab8028a20dc77814394bb16b58e4a93be">MPARC_push_filestr</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *structure, const char *filename, char *stringc, <a class="el" href="../../d6/d08/mparc_8h.htm#a6dd4c5df4f9e32a9e863fc789ebaddfb">MXPSQL_MPARC_uint_repr_t</a> sizey)</td></tr>
<tr class="memdesc:ab8028a20dc77814394bb16b58e4a93be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Push a string as a file.  <br /></td></tr>
<tr class="separator:ab8028a20dc77814394bb16b58e4a93be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e908a8e3a42c791c6863797af8935b5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a5e908a8e3a42c791c6863797af8935b5">MPARC_push_filename</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *structure, const char *filename)</td></tr>
<tr class="memdesc:a5e908a8e3a42c791c6863797af8935b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Push a file read from the filesystem into the archive.  <br /></td></tr>
<tr class="separator:a5e908a8e3a42c791c6863797af8935b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ef974df9809818436802bf6e3a2588e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a5ef974df9809818436802bf6e3a2588e">MPARC_push_filestream</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *structure, FILE *filestream, const char *filename)</td></tr>
<tr class="memdesc:a5ef974df9809818436802bf6e3a2588e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Push an active filestream into the archive as a file.  <br /></td></tr>
<tr class="separator:a5ef974df9809818436802bf6e3a2588e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad19d14cc148f3b983b1c3a8f38d6720d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#ad19d14cc148f3b983b1c3a8f38d6720d">MPARC_rename_file</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *structure, bool overwrite, const char *oldname, const char *newname)</td></tr>
<tr class="memdesc:ad19d14cc148f3b983b1c3a8f38d6720d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rename an entry.  <br /></td></tr>
<tr class="separator:ad19d14cc148f3b983b1c3a8f38d6720d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab98218a8b53f801a8191a2b0e2181153"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#ab98218a8b53f801a8191a2b0e2181153">MPARC_duplicate_file</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *structure, bool overwrite, const char *srcfile, const char *destfile)</td></tr>
<tr class="memdesc:ab98218a8b53f801a8191a2b0e2181153"><td class="mdescLeft">&#160;</td><td class="mdescRight">Duplicate an entry.  <br /></td></tr>
<tr class="separator:ab98218a8b53f801a8191a2b0e2181153"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd013dd1d48216d0e879e9923adaa47a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#afd013dd1d48216d0e879e9923adaa47a">MPARC_swap_file</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *structure, const char *file1, const char *file2)</td></tr>
<tr class="memdesc:afd013dd1d48216d0e879e9923adaa47a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Swap 2 entries.  <br /></td></tr>
<tr class="separator:afd013dd1d48216d0e879e9923adaa47a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1dd72fe09a33d45a0594e30c4de589c9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a1dd72fe09a33d45a0594e30c4de589c9">MPARC_pop_file</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *structure, const char *filename)</td></tr>
<tr class="memdesc:a1dd72fe09a33d45a0594e30c4de589c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pop a file off the archive.  <br /></td></tr>
<tr class="separator:a1dd72fe09a33d45a0594e30c4de589c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a211f6b2c204d841108a1c841daafa80e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a211f6b2c204d841108a1c841daafa80e">MPARC_clear</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *structure)</td></tr>
<tr class="memdesc:a211f6b2c204d841108a1c841daafa80e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Wipe everything (I mean every single file) off the archive.  <br /></td></tr>
<tr class="separator:a211f6b2c204d841108a1c841daafa80e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a677f04c3376fd501c2d8aaa19f147984"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a677f04c3376fd501c2d8aaa19f147984">MPARC_peek_file</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *structure, const char *filename, unsigned char **bout, <a class="el" href="../../d6/d08/mparc_8h.htm#a6dd4c5df4f9e32a9e863fc789ebaddfb">MXPSQL_MPARC_uint_repr_t</a> *sout)</td></tr>
<tr class="memdesc:a677f04c3376fd501c2d8aaa19f147984"><td class="mdescLeft">&#160;</td><td class="mdescRight">Peek the contents of a file of the archive.  <br /></td></tr>
<tr class="separator:a677f04c3376fd501c2d8aaa19f147984"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b17c807bb2fa6e05ac4130112ce6643"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a5b17c807bb2fa6e05ac4130112ce6643">MPARC_construct_str</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *structure, char **output)</td></tr>
<tr class="memdesc:a5b17c807bb2fa6e05ac4130112ce6643"><td class="mdescLeft">&#160;</td><td class="mdescRight">How to construct and parse MPAR archives. No EBNF provided cause I don't know how to represent it.  <br /></td></tr>
<tr class="separator:a5b17c807bb2fa6e05ac4130112ce6643"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adabab1461aa5fa7e8aa042a00c2a4a0c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#adabab1461aa5fa7e8aa042a00c2a4a0c">MPARC_construct_filename</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *structure, const char *filename)</td></tr>
<tr class="memdesc:adabab1461aa5fa7e8aa042a00c2a4a0c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct the archive into a file.  <br /></td></tr>
<tr class="separator:adabab1461aa5fa7e8aa042a00c2a4a0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa125160bff8db1ddf1b8bb0aba864b74"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#aa125160bff8db1ddf1b8bb0aba864b74">MPARC_construct_filestream</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *structure, FILE *fpstream)</td></tr>
<tr class="memdesc:aa125160bff8db1ddf1b8bb0aba864b74"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct the archive into a file stream.  <br /></td></tr>
<tr class="separator:aa125160bff8db1ddf1b8bb0aba864b74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefa6bafcddd579e0b46f3bb5cb3a479c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#aefa6bafcddd579e0b46f3bb5cb3a479c">MPARC_extract_advance</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *structure, const char *destdir, char **dir2make, void(*on_item)(const char *, void *), int(*mk_dir)(char *, void *), void *on_item_ctx, void *mk_dir_ctx)</td></tr>
<tr class="memdesc:aefa6bafcddd579e0b46f3bb5cb3a479c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Advanced extraction function.  <br /></td></tr>
<tr class="separator:aefa6bafcddd579e0b46f3bb5cb3a479c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac13fc6725de74ddb52f7108c819299da"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#ac13fc6725de74ddb52f7108c819299da">MPARC_extract</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *structure, const char *destdir, char **dir2make)</td></tr>
<tr class="memdesc:ac13fc6725de74ddb52f7108c819299da"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simple version of MPARC_extract_advance.  <br /></td></tr>
<tr class="separator:ac13fc6725de74ddb52f7108c819299da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5cb6ee181b1984f1f5c74915971083b8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a5cb6ee181b1984f1f5c74915971083b8">MPARC_readdir</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *structure, const char *srcdir, bool recursive, int(*listdir)(const char *, bool, char ***, void *), void *listdir_ctx)</td></tr>
<tr class="memdesc:a5cb6ee181b1984f1f5c74915971083b8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read a directory into the structure.  <br /></td></tr>
<tr class="separator:a5cb6ee181b1984f1f5c74915971083b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e0d911cce6085d4763c0d957dcef45e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a6e0d911cce6085d4763c0d957dcef45e">MPARC_parse_str_advance</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *structure, const char *StegoStringy, bool erronduplicate, bool sensitive)</td></tr>
<tr class="memdesc:a6e0d911cce6085d4763c0d957dcef45e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse the archive into the structure with extra flags.  <br /></td></tr>
<tr class="separator:a6e0d911cce6085d4763c0d957dcef45e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29a82ea12bfbf7210256c1264aedb091"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a29a82ea12bfbf7210256c1264aedb091">MPARC_parse_str</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *structure, const char *stringy)</td></tr>
<tr class="memdesc:a29a82ea12bfbf7210256c1264aedb091"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse the archive into the structure, a simpler version of MPARC_parse_str_advance.  <br /></td></tr>
<tr class="separator:a29a82ea12bfbf7210256c1264aedb091"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10a53d66991368ae2ae051f485d8a728"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a10a53d66991368ae2ae051f485d8a728">MPARC_parse_filestream</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *structure, FILE *fpstream)</td></tr>
<tr class="memdesc:a10a53d66991368ae2ae051f485d8a728"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse the opened file stream archive into the structure.  <br /></td></tr>
<tr class="separator:a10a53d66991368ae2ae051f485d8a728"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a329d8459e0d873adbafadb9969b5f392"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a329d8459e0d873adbafadb9969b5f392">MPARC_parse_filename</a> (<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *structure, const char *filename)</td></tr>
<tr class="memdesc:a329d8459e0d873adbafadb9969b5f392"><td class="mdescLeft">&#160;</td><td class="mdescRight">Parse the archive file from the filename into the structure.  <br /></td></tr>
<tr class="separator:a329d8459e0d873adbafadb9969b5f392"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a397599ed1504ab0b9ad7a5c945c359ba"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a397599ed1504ab0b9ad7a5c945c359ba">MPARC_malloc</a> (<a class="el" href="../../d6/d08/mparc_8h.htm#a6dd4c5df4f9e32a9e863fc789ebaddfb">MXPSQL_MPARC_uint_repr_t</a> size)</td></tr>
<tr class="memdesc:a397599ed1504ab0b9ad7a5c945c359ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">My malloc, for easy plug and switch. Extensions should use this instead of malloc.  <br /></td></tr>
<tr class="separator:a397599ed1504ab0b9ad7a5c945c359ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab23a5170998401c4b3852fe54d4374a3"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#ab23a5170998401c4b3852fe54d4374a3">MPARC_calloc</a> (<a class="el" href="../../d6/d08/mparc_8h.htm#a6dd4c5df4f9e32a9e863fc789ebaddfb">MXPSQL_MPARC_uint_repr_t</a> arr_size, size_t el_size)</td></tr>
<tr class="memdesc:ab23a5170998401c4b3852fe54d4374a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">My calloc, for easy plug and switch. Extensions should use this instead of calloc.  <br /></td></tr>
<tr class="separator:ab23a5170998401c4b3852fe54d4374a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bbdf1d27c7dbf8c222535770fb5323f"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a1bbdf1d27c7dbf8c222535770fb5323f">MPARC_realloc</a> (void *oldmem, <a class="el" href="../../d6/d08/mparc_8h.htm#a6dd4c5df4f9e32a9e863fc789ebaddfb">MXPSQL_MPARC_uint_repr_t</a> newsize)</td></tr>
<tr class="memdesc:a1bbdf1d27c7dbf8c222535770fb5323f"><td class="mdescLeft">&#160;</td><td class="mdescRight">My realloc, for easy plug and switch. Extensions should use this instead of realloc.  <br /></td></tr>
<tr class="separator:a1bbdf1d27c7dbf8c222535770fb5323f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95d02449201605a28ce5143bc19b1abc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a95d02449201605a28ce5143bc19b1abc">MPARC_free</a> (void *mem)</td></tr>
<tr class="memdesc:a95d02449201605a28ce5143bc19b1abc"><td class="mdescLeft">&#160;</td><td class="mdescRight">My free, for easy plug and switch. Extensions should use this instead of free.  <br /></td></tr>
<tr class="separator:a95d02449201605a28ce5143bc19b1abc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ba40404c2a0ac26ee34350820770194"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a8ba40404c2a0ac26ee34350820770194">MPARC_MXPSQL_MPARC_t_sizeof</a> (void)</td></tr>
<tr class="memdesc:a8ba40404c2a0ac26ee34350820770194"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get sizeof <a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm" title="Not the best place to find documentation for this struct, see mparc.h for better info....">MXPSQL_MPARC_t</a>.  <br /></td></tr>
<tr class="separator:a8ba40404c2a0ac26ee34350820770194"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca83479a1ec5c46392d5d0891eecc6ca"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#aca83479a1ec5c46392d5d0891eecc6ca">MPARC_MXPSQL_MPARC_iter_t_sizeof</a> (void)</td></tr>
<tr class="memdesc:aca83479a1ec5c46392d5d0891eecc6ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get sizeof <a class="el" href="../../d0/dd2/struct_m_x_p_s_q_l___m_p_a_r_c__iter__t.htm" title="Iterator.">MXPSQL_MPARC_iter_t</a>.  <br /></td></tr>
<tr class="separator:aca83479a1ec5c46392d5d0891eecc6ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9dba6aa636c30ee35f2f4962a82e19b4"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a9dba6aa636c30ee35f2f4962a82e19b4">MPARC_mkdirer</a> (char *dir, void *ctx)</td></tr>
<tr class="memdesc:a9dba6aa636c30ee35f2f4962a82e19b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Make a directory.  <br /></td></tr>
<tr class="separator:a9dba6aa636c30ee35f2f4962a82e19b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86d2ede0312cc1a4af72cb21dba21169"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d9/dd9/mparc_8c.htm#a86d2ede0312cc1a4af72cb21dba21169">MPARC_list_me_dir</a> (const char *path, bool recursive, char ***output, void *ctx)</td></tr>
<tr class="memdesc:a86d2ede0312cc1a4af72cb21dba21169"><td class="mdescLeft">&#160;</td><td class="mdescRight">List whatever is in that directory.  <br /></td></tr>
<tr class="separator:a86d2ede0312cc1a4af72cb21dba21169"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>MPARC, A Dumb Archiver Format C Rewrite Of MPAR. C Source File. </p>
<dl class="section author"><dt>Author</dt><dd>MXPSQL </dd></dl>
<dl class="section version"><dt>Version</dt><dd>0.1 </dd></dl>
<dl class="section date"><dt>Date</dt><dd>2022-09-26</dd></dl>
<dl class="section copyright"><dt>Copyright</dt><dd></dd></dl>
<p>Licensed To You Under Teh MIT License and the LGPL-2.1-Or-Later License</p>
<p>MIT License</p>
<p>Copyright (c) 2022 MXPSQL</p>
<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p>
<p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>
<p>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>
<p>MPARC, A rewrite of MPAR IN C, a dumb archiver format Copyright (C) 2022 MXPSQL</p>
<p>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</p>
<p>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.</p>
<p>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA </p>
</div><h2 class="groupheader">Macro Definition Documentation</h2>
<a id="a2ad7e18ba758ac0fc4c67b4d963dd119" name="a2ad7e18ba758ac0fc4c67b4d963dd119"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ad7e18ba758ac0fc4c67b4d963dd119">&#9670;&#160;</a></span>MPARC_DIRECTF_MINIMUM</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MPARC_DIRECTF_MINIMUM&#160;&#160;&#160;(8000)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Magic threshold number. </p>
<p>Fwrite and Fread usage threshold. How much bytes is needed to warant using fwrite or fread, else use fputc or fgetc.</p>
<p>Default is 8 kiloytes, think of as in bytes, not bits. </p>

</div>
</div>
<a id="a9b1621e1582ea29e5168ef97ac544868" name="a9b1621e1582ea29e5168ef97ac544868"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9b1621e1582ea29e5168ef97ac544868">&#9670;&#160;</a></span>MPARC_QSORT_MODE</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MPARC_QSORT_MODE&#160;&#160;&#160;1</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Magic sorter mode</p>
<p>Sorting mode.</p>
<p>if set to 0, then the entries will be sorted by their checksum values, else if set to 1 sorted by their filename, else randomly sorted.</p>
<p>Default is 1.</p>
<p>That description for mode 0 was actually false (sort of), normally the checksum will sort itself, but if it fails, then the json will sort it </p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="ab23a5170998401c4b3852fe54d4374a3" name="ab23a5170998401c4b3852fe54d4374a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab23a5170998401c4b3852fe54d4374a3">&#9670;&#160;</a></span>MPARC_calloc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void * MPARC_calloc </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d08/mparc_8h.htm#a6dd4c5df4f9e32a9e863fc789ebaddfb">MXPSQL_MPARC_uint_repr_t</a>&#160;</td>
          <td class="paramname"><em>arr_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>el_size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>My calloc, for easy plug and switch. Extensions should use this instead of calloc. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">arr_size</td><td>size of array (if applicable, else put 1) </td></tr>
    <tr><td class="paramname">el_size</td><td>size of element </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>void* allocated memory pointer</dd></dl>
<dl class="section note"><dt>Note</dt><dd>MPARC_calloc has its pitfalls. Don't fall for it. <br  />
 Right now is using C's calloc, so it is at the mercy of that function as calloc has flaws. <br  />
 Allocating a zero sized object with MPARC_calloc, danger is from that it is implementation defined. </dd></dl>

</div>
</div>
<a id="a5e0f388381ef42b9660faa483dd858df" name="a5e0f388381ef42b9660faa483dd858df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e0f388381ef42b9660faa483dd858df">&#9670;&#160;</a></span>MPARC_cipher()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_cipher </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *&#160;</td>
          <td class="paramname"><em>structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>SetXOR</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char *&#160;</td>
          <td class="paramname"><em>XORKeyIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d08/mparc_8h.htm#a6dd4c5df4f9e32a9e863fc789ebaddfb">MXPSQL_MPARC_uint_repr_t</a>&#160;</td>
          <td class="paramname"><em>XORKeyLengthIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char **&#160;</td>
          <td class="paramname"><em>XORKeyOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d08/mparc_8h.htm#a6dd4c5df4f9e32a9e863fc789ebaddfb">MXPSQL_MPARC_uint_repr_t</a> *&#160;</td>
          <td class="paramname"><em>XORKeyLengthOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>SetROT</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>ROTKeyIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d08/mparc_8h.htm#a6dd4c5df4f9e32a9e863fc789ebaddfb">MXPSQL_MPARC_uint_repr_t</a>&#160;</td>
          <td class="paramname"><em>ROTKeyLengthIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int **&#160;</td>
          <td class="paramname"><em>ROTKeyOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d08/mparc_8h.htm#a6dd4c5df4f9e32a9e863fc789ebaddfb">MXPSQL_MPARC_uint_repr_t</a> *&#160;</td>
          <td class="paramname"><em>ROTKeyLengthOut</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Control cipher encryption;One function to control two ciphers (horrible design) </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure </td></tr>
    <tr><td class="paramname">SetXOR</td><td>Indicate if you want to set XOR Encryption </td></tr>
    <tr><td class="paramname">XORKeyIn</td><td>XOR Key Input </td></tr>
    <tr><td class="paramname">XORKeyLengthIn</td><td>XOR Key Input Length </td></tr>
    <tr><td class="paramname">XORKeyOut</td><td>XOR Key Output </td></tr>
    <tr><td class="paramname">XORKeyLengthOut</td><td>XOR Key Output Length </td></tr>
    <tr><td class="paramname">SetROT</td><td>Indicate if you want to set ROT Encryption </td></tr>
    <tr><td class="paramname">ROTKeyIn</td><td>ROT Key Input </td></tr>
    <tr><td class="paramname">ROTKeyLengthIn</td><td>ROT Key Input Length </td></tr>
    <tr><td class="paramname">ROTKeyOut</td><td>ROT Key Output Length </td></tr>
    <tr><td class="paramname">ROTKeyLengthOut</td><td>ROT Key Output Length </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err the status code: MPARC_OK if any encryption is set, MPARC_NOCRYPT if no encryption is set</dd></dl>
<p>To disable encryption set XORKeyIn or ROTKeyIn to NULL.</p>
<p>To check whether encryption is enabled, check if XORKeyOut or ROTKeyOut is NULL. If XORKeyOut is NULL, then XOR encryption is disabled, same thing applies to ROTKeyOut.</p>
<p>Output is first set before setting the new key, so you can get the old key.</p>
<dl class="section note"><dt>Note</dt><dd>Having the wrong encryption key will cause garbage data or (more likely) a checksum failure. </dd></dl>

</div>
</div>
<a id="a211f6b2c204d841108a1c841daafa80e" name="a211f6b2c204d841108a1c841daafa80e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a211f6b2c204d841108a1c841daafa80e">&#9670;&#160;</a></span>MPARC_clear()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_clear </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *&#160;</td>
          <td class="paramname"><em>structure</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Wipe everything (I mean every single file) off the archive. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err the status code if successfully done </dd></dl>

</div>
</div>
<a id="adabab1461aa5fa7e8aa042a00c2a4a0c" name="adabab1461aa5fa7e8aa042a00c2a4a0c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adabab1461aa5fa7e8aa042a00c2a4a0c">&#9670;&#160;</a></span>MPARC_construct_filename()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_construct_filename </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *&#160;</td>
          <td class="paramname"><em>structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct the archive into a file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure </td></tr>
    <tr><td class="paramname">filename</td><td>the filename target </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err the status code if successfully done </dd></dl>

</div>
</div>
<a id="aa125160bff8db1ddf1b8bb0aba864b74" name="aa125160bff8db1ddf1b8bb0aba864b74"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa125160bff8db1ddf1b8bb0aba864b74">&#9670;&#160;</a></span>MPARC_construct_filestream()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_construct_filestream </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *&#160;</td>
          <td class="paramname"><em>structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fpstream</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct the archive into a file stream. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure </td></tr>
    <tr><td class="paramname">fpstream</td><td>the file stream, should be opened in "rb" mode </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err the status code if successfully done</dd></dl>
<dl class="section note"><dt>Note</dt><dd>fpstream should be closed and opened manually </dd></dl>

</div>
</div>
<a id="a5b17c807bb2fa6e05ac4130112ce6643" name="a5b17c807bb2fa6e05ac4130112ce6643"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b17c807bb2fa6e05ac4130112ce6643">&#9670;&#160;</a></span>MPARC_construct_str()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_construct_str </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *&#160;</td>
          <td class="paramname"><em>structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char **&#160;</td>
          <td class="paramname"><em>output</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>How to construct and parse MPAR archives. No EBNF provided cause I don't know how to represent it. </p>
<p>Construct the archive into a string.</p>
<p>SEE THIS TO SEE THE FILE FORMAT OF THE ARCHIVE THIS PART IS IMPORTANT TO SEE HOW IT IS IMPLEMENTED AND THE FORMAT</p>
<p>How is the file constructed (along with little parsing information to make your own parser):</p>
<ol type="1">
<li>Build the header: <pre class="fragment"> Format: 
     MXPSQL's Portable Archive;[VERSION]${JSON_WHATEV_METADATA}&gt;[NEWLINE]

 The ';' character separates the Magic numbers (very long with 25 character I think) from the version number and json metadata

 The '$' character separates the version and magic numbers from the metadata

 The '&gt;' character works to indicate the start of entries
 The newline is an anomaly though, but just put it in there

 JSON_WHATEV_METADATA have certain mandaroty parameters.  
 There must be the "encrypt" field to indicate encryption provided.  
 Standard encryption algorithm is XOR and ROT (ROT13 or anything else like ROT100 or whatever).  
 Other field specific to each implementation are ignored.

 Construction note:
 Make sure to base64 your metadata entries to prevent issues with parsing.

 Parsing tips:
     - Splitting order -
     Split ';' from the whole archive to get the magic number first  
     Then split '&gt;' from to get the special info header  
     The split '$' from the special info header to get the version and extra metadata.
</pre></li>
<li>Build the entries <pre class="fragment"> Format: 
     [CRC32_OF_JSON]%{"filename":[FILENAME],"blob":[BASE64_BINARY], "crcsum":[CRC32_OF_blob]}[NEWLINE]

 The '%' character is to separate the checksum of the JSON from the JSON itself

 You can add other metadata like date of creation, but there must be the entries "filename", "blob" and "crcsum" in the JSON
 This C implementation will ignore any extra metadata.

 "filename" should contain the filename. It should be a simple null terminated string (don't do any effects and magic on this field called "filename"). It should conform to the environment's valid filename characters (no backslashes or filename called "CON" and "AUX").
 "blob" should contain the base64 of the binary or text file. (base64 to make it a text file and not binary)
 "crcsum" should contain the CRC32 checksum of the content of "blob" after converting it back to it's original form. ("blob" but wihtout base64). If encryption is set, the "crcsum" should be the non base64 encoded and unencrypted "blob" ("blob" with no base64 encoding and encruption)

 [NEWLINE] should be EXACTLY '\n' (LF), not '\r\n' (CRLF) or other newlines.

 Repeat this as required (how many entries are there you repeat)

 Construction note:
 The anomaly mention aboved is because the newline is added before the main content.  
 XOR cipher is applied before ROT cipher, this sequencing is Mandatory for all implementations.

 Parsing note:
     When parsing the entries, split from the begin '&gt;' marker first, and then the end '@' marker.
     Then split each by newlines.
     Ignore if a line start with '#' (EXACTLY WITH THAT CHARACTER, there must not even be any whitespace before it; You shall not strip it), a comment marker.  
     Also ignore if a line is empty.
     Then, foreach split '%' to get the crc and json.
     Then compare the JSON to the crc.
     Then parse the JSON as usual.

     Each implementation shall decrypt with ROT before XOR because XOR is applied before ROT during construction, this sequencing is Mandatory. Be prepared to wrap your head with this.

 You could parse extra info in your implementation, but this C Based implementation will ignore extra ones. I repeat this line again.
</pre></li>
<li>Build the footer <pre class="fragment"> Format: 
     @~

 the '@' character is to signify end of entry
 the '~' character is to signify end of file

 Parsing note:
 Make sure to not have anything beyond the footer, not even a newline.
</pre></li>
</ol>
<p>Final note: This file should not have binary characters. Parsing should fail if BOM or non ASCII character is found. This means MPARC archives should be valid ASCII files, not valid UTF files (No UTF8 and UTF16). Encryption is optional;XOR and ROT (the standard encryption) can be disabled (by default it is disabled).</p>
<p>Follow this (with placeholder) and you get this: </p><pre class="fragment">MXPSQL's Portable Archive;[VERSION]${JSON_WHATEV_METADATA}&gt;[NEWLINE][CRC32_OF_JSON]%{"filename":[FILENAME],"blob":[BASE64_BINARY], "crcsum":[CRC32_OF_blob]}[NEWLINE]@~
</pre><p>A real single entried one: </p><pre class="fragment">MXPSQL's Portable Archive;1${"WhatsThis": "MPARC Logo lmao-Hahahaha", "encrypt": []}&gt;  
134131812%{"filename":"./LICENSE.MIT","blob":"TUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgMjAyMiBNWFBTUUwKClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwKaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cwp0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcwpmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsCmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUgpJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwKRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFCkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIKTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwKT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUKU09GVFdBUkUu","crcsum":"15584406"}@~
</pre><p>A real (much more real) multi entried one: </p><pre class="fragment">MXPSQL's Portable Archive;1${"encrypt": []}&gt;  
3601911152%{"filename":"LICENSE","blob":"U2VlIExJQ0VOU0UuTEdQTCBhbmQgTElDRU5TRS5NSVQgYW5kIGNob29zZSBvbmUgb2YgdGhlbS4KCkxJQ0VOU0UuTEdQTCBjb250YWlucyBMR1BMLTIuMS1vci1sYXRlciBsaWNlbnNlLgpMSUNFTlNFLk1JVCBjb250YWlucyBNSVQgbGljZW5zZS4KCkxJQ0VOU0UuTEdQTCBhbmQgTElDRU5TRS5NSVQgc2hvdWxkIGJlIGRpc3RyaWJ1dGVkIHRvZ2V0aGVyIHdpdGggeW91ciBjb3B5LCBpZiBub3QsIHNvbWV0aGluZyBpcyB3cm9uZy4=","crcsum":"404921597"}  
59879441%{"filename":"LICENSE.MIT","blob":"TUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgMjAyMiBNWFBTUUwKClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwKaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cwp0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcwpmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsCmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUgpJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwKRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFCkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIKTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwKT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUKU09GVFdBUkUu","crcsum":"15584406"}@~
</pre> 
</div>
</div>
<a id="a6da21dcbf030cec0307ad7bfd3ea4f48" name="a6da21dcbf030cec0307ad7bfd3ea4f48"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6da21dcbf030cec0307ad7bfd3ea4f48">&#9670;&#160;</a></span>MPARC_copy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_copy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> **&#160;</td>
          <td class="paramname"><em>structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> **&#160;</td>
          <td class="paramname"><em>targetdest</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize structure by copying. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure for copying </td></tr>
    <tr><td class="paramname">targetdest</td><td>the destination target structure to be overwritten </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err the status code </dd></dl>

</div>
</div>
<a id="a5a278819906e49b1155ee23cd2f3ad33" name="a5a278819906e49b1155ee23cd2f3ad33"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a278819906e49b1155ee23cd2f3ad33">&#9670;&#160;</a></span>MPARC_destroy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_destroy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> **&#160;</td>
          <td class="paramname"><em>structure</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Tear down structure. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err the status code </dd></dl>

</div>
</div>
<a id="ab98218a8b53f801a8191a2b0e2181153" name="ab98218a8b53f801a8191a2b0e2181153"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab98218a8b53f801a8191a2b0e2181153">&#9670;&#160;</a></span>MPARC_duplicate_file()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_duplicate_file </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *&#160;</td>
          <td class="paramname"><em>structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>overwrite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>srcfile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>destfile</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Duplicate an entry. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure </td></tr>
    <tr><td class="paramname">overwrite</td><td>Overwrite an entry? </td></tr>
    <tr><td class="paramname">srcfile</td><td>the source file to duplicate from. </td></tr>
    <tr><td class="paramname">destfile</td><td>the destination file </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err Yes.</dd></dl>
<p>Internally implemented with MPARC_push_ufilestr and MPARC_peek_file </p>

</div>
</div>
<a id="ae8ef340b41eb2b0e988fd6a2dd76c5cc" name="ae8ef340b41eb2b0e988fd6a2dd76c5cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae8ef340b41eb2b0e988fd6a2dd76c5cc">&#9670;&#160;</a></span>MPARC_exists()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_exists </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *&#160;</td>
          <td class="paramname"><em>structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Check if file entry exists. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure </td></tr>
    <tr><td class="paramname">filename</td><td>the filename to check </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err the status code if successfully done or errors out </dd></dl>

</div>
</div>
<a id="ac13fc6725de74ddb52f7108c819299da" name="ac13fc6725de74ddb52f7108c819299da"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac13fc6725de74ddb52f7108c819299da">&#9670;&#160;</a></span>MPARC_extract()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_extract </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *&#160;</td>
          <td class="paramname"><em>structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>destdir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char **&#160;</td>
          <td class="paramname"><em>dir2make</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Simple version of MPARC_extract_advance. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure </td></tr>
    <tr><td class="paramname">destdir</td><td>the destination directory </td></tr>
    <tr><td class="paramname">dir2make</td><td>NULL if there is no directory to make, not NULL if it needs you to make a directory </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err error status of extraction, some codes are special, see MPARC_extract_advance for more info</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d6/d08/mparc_8h.htm#aefa6bafcddd579e0b46f3bb5cb3a479c" title="Advanced extraction function.">MPARC_extract_advance</a> </dd></dl>

</div>
</div>
<a id="aefa6bafcddd579e0b46f3bb5cb3a479c" name="aefa6bafcddd579e0b46f3bb5cb3a479c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aefa6bafcddd579e0b46f3bb5cb3a479c">&#9670;&#160;</a></span>MPARC_extract_advance()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_extract_advance </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *&#160;</td>
          <td class="paramname"><em>structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>destdir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char **&#160;</td>
          <td class="paramname"><em>dir2make</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void(*)(const char *, void *)&#160;</td>
          <td class="paramname"><em>on_item</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int(*)(char *, void *)&#160;</td>
          <td class="paramname"><em>mk_dir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>on_item_ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>mk_dir_ctx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Advanced extraction function. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure </td></tr>
    <tr><td class="paramname">destdir</td><td>the destination directory </td></tr>
    <tr><td class="paramname">dir2make</td><td>NULL if there is no directory to make, not NULL if it needs you to make a directory </td></tr>
    <tr><td class="paramname">on_item</td><td>invoked everytime a new item is iterated over </td></tr>
    <tr><td class="paramname">mk_dir</td><td>invoked when directory is needed to be created, return 0 on success, non-zero on error. Overrides dir2make. </td></tr>
    <tr><td class="paramname">on_item_ctx</td><td>context value that is passed to on_item </td></tr>
    <tr><td class="paramname">mk_dir_ctx</td><td>context value that is passed to mk_dir </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err error status, some code are special, see details</dd></dl>
<p>if the error code returns MPARC_OPPART, check dir2make to see if it needs you to make a new directory.</p>
<p>Example of the mk_dir function: <br  />
 </p><div class="fragment"><div class="line"><span class="keywordtype">int</span> mkdirer(<span class="keywordtype">char</span>* dir, <span class="keywordtype">void</span>* ctx){</div>
<div class="line">    ((void)ctx);</div>
<div class="line"><span class="preprocessor">    #if (defined(_WIN32) || defined(_WIN64)) &amp;&amp; !(defined(__CYGWIN__))</span></div>
<div class="line">    <span class="keywordflow">return</span> !CreateDirectoryA(dir, NULL);</div>
<div class="line"><span class="preprocessor">    #else</span></div>
<div class="line">    <span class="keywordflow">return</span> mkdir(dir, 0777);</div>
<div class="line"><span class="preprocessor">    #endif</span></div>
<div class="line">}</div>
</div><!-- fragment --> 
</div>
</div>
<a id="a0d77b86222a2630f482dc038b149e553" name="a0d77b86222a2630f482dc038b149e553"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0d77b86222a2630f482dc038b149e553">&#9670;&#160;</a></span>MPARC_fperror()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int MPARC_fperror </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td>
          <td class="paramname"><em>err</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fileptrstream</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Print the error message of your stream of choice. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">err</td><td>error code </td></tr>
    <tr><td class="paramname">fileptrstream</td><td>stream of your choice </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>int Level of error</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d6/d08/mparc_8h.htm#acb33c06446b2c32a15eaead47728808c" title="Print the error message to your stream of choice with a message of your choice.">MPARC_sfperror</a> </dd></dl>

</div>
</div>
<a id="a95d02449201605a28ce5143bc19b1abc" name="a95d02449201605a28ce5143bc19b1abc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95d02449201605a28ce5143bc19b1abc">&#9670;&#160;</a></span>MPARC_free()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void MPARC_free </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>mem</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>My free, for easy plug and switch. Extensions should use this instead of free. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">mem</td><td>memory to free</td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note</dt><dd></dd></dl>
<p>MPARC_free has its pitfalls. Don't fall for it. <br  />
 Right now is using C's free, so it is at the mercy of that function as free has flaws. <br  />
 Common one: <br  />
 Double free, danger is that it is undefined behaviour to do so. <br  />
 Free not allocated memory, danger is that it is also undefined behaviour to do so. <br  />
 Not freeing memory if you are done with it, danger is that you played yourself with memory leaks. </p>

</div>
</div>
<a id="ad84d7044d4f65ef1385cd7453278aa27" name="ad84d7044d4f65ef1385cd7453278aa27"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad84d7044d4f65ef1385cd7453278aa27">&#9670;&#160;</a></span>MPARC_get_last_error()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_get_last_error </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> **&#160;</td>
          <td class="paramname"><em>structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> *&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get last error from internally maintained state, the state is sticky. <br  />
 (If one of your functions does not return MXPSQL_MPARC_err, how cruel of you to do that by forcing users to resort to this function). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure </td></tr>
    <tr><td class="paramname">out</td><td>Get your error state here </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err Level of error or status during lookup (not int though) </dd></dl>

</div>
</div>
<a id="a1fe7a9487c96376771cec41e72f1fbf7" name="a1fe7a9487c96376771cec41e72f1fbf7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1fe7a9487c96376771cec41e72f1fbf7">&#9670;&#160;</a></span>MPARC_init()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_init </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> **&#160;</td>
          <td class="paramname"><em>structure</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize sturcture. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err the status code </dd></dl>

</div>
</div>
<a id="a70b485272c72704901ab0e2c54d40820" name="a70b485272c72704901ab0e2c54d40820"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70b485272c72704901ab0e2c54d40820">&#9670;&#160;</a></span>MPARC_list_array()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_list_array </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *&#160;</td>
          <td class="paramname"><em>structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char ***&#160;</td>
          <td class="paramname"><em>listout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d08/mparc_8h.htm#a6dd4c5df4f9e32a9e863fc789ebaddfb">MXPSQL_MPARC_uint_repr_t</a> *&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>List out the current files included as an array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure </td></tr>
    <tr><td class="paramname">listout</td><td>the output list </td></tr>
    <tr><td class="paramname">length</td><td>the length of listout </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err the status code if successfully done</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Free listout manually with MPARC_list_array_free, not 'free' or 'delete' for forward compatibility. Using 'MPARC_free' would get you memory leaks instead.</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d6/d08/mparc_8h.htm#a70b485272c72704901ab0e2c54d40820" title="List out the current files included as an array.">MPARC_list_array</a> </dd></dl>

</div>
</div>
<a id="abc033ce1084b6c7e42ebfa2415ccd160" name="abc033ce1084b6c7e42ebfa2415ccd160"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abc033ce1084b6c7e42ebfa2415ccd160">&#9670;&#160;</a></span>MPARC_list_array_free()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_list_array_free </td>
          <td>(</td>
          <td class="paramtype">char ***&#160;</td>
          <td class="paramname"><em>list</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Utility function that free the list that you created with MPARC_list_array. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">list</td><td>the list you got </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err successful?</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d6/d08/mparc_8h.htm#a70b485272c72704901ab0e2c54d40820" title="List out the current files included as an array.">MPARC_list_array</a> </dd></dl>

</div>
</div>
<a id="a447ddf276fb30e5722e79b5997814271" name="a447ddf276fb30e5722e79b5997814271"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a447ddf276fb30e5722e79b5997814271">&#9670;&#160;</a></span>MPARC_list_foreach()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_list_foreach </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *&#160;</td>
          <td class="paramname"><em>structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool *&#160;</td>
          <td class="paramname"><em>cb_aborted</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>(*)(<a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *, const char *, void *)&#160;</td>
          <td class="paramname"><em>callback</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>cb_ctx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Foreach, with call backs. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure </td></tr>
    <tr><td class="paramname">cb_aborted</td><td>a flag that indicated if an error code resulted from abortion request (true) or an internal error (false). Can be NULL. </td></tr>
    <tr><td class="paramname">callback</td><td>callback function that gets called on every iteration, a void parameter is provided for context </td></tr>
    <tr><td class="paramname">cb_ctx</td><td>context value that is passed to the void* parameter of callback </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err the status code if successfully done. MPARC_OK if successfull, other error codes if aborted (dependent on callback).</dd></dl>
<p>For the callback function:</p>
<p>To continue an iteration, return MPARC_OK.</p>
<p>To abort the loop, return any other values in MXPSQL_MPARC_err other than MPARC_OK. cb_aborted is set to 1 and the value is returned from callback.</p>
<p>Other details:</p>
<p>If an internal error occurs, the error code corresponding to the error is returned, but cb_aborted is set to 0. </p>

</div>
</div>
<a id="af69cf2c23d9a3d0f4a175c7c1dc8af2e" name="af69cf2c23d9a3d0f4a175c7c1dc8af2e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af69cf2c23d9a3d0f4a175c7c1dc8af2e">&#9670;&#160;</a></span>MPARC_list_iterator_destroy()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_list_iterator_destroy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/dd2/struct_m_x_p_s_q_l___m_p_a_r_c__iter__t.htm">MXPSQL_MPARC_iter_t</a> **&#160;</td>
          <td class="paramname"><em>iterator</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Destroy the iterator. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">iterator</td><td>the target iterator </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err the status code if successfully done </dd></dl>

</div>
</div>
<a id="a984c02b5c1b6a21cfbe863364f78208b" name="a984c02b5c1b6a21cfbe863364f78208b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a984c02b5c1b6a21cfbe863364f78208b">&#9670;&#160;</a></span>MPARC_list_iterator_init()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_list_iterator_init </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> **&#160;</td>
          <td class="paramname"><em>structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d0/dd2/struct_m_x_p_s_q_l___m_p_a_r_c__iter__t.htm">MXPSQL_MPARC_iter_t</a> **&#160;</td>
          <td class="paramname"><em>iterator</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Initialize the iterator that list the current files included. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure </td></tr>
    <tr><td class="paramname">iterator</td><td>the target iterator </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err the status code if successfully done </dd></dl>

</div>
</div>
<a id="a0e2b9d912b91cac836a472009257f732" name="a0e2b9d912b91cac836a472009257f732"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e2b9d912b91cac836a472009257f732">&#9670;&#160;</a></span>MPARC_list_iterator_next()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_list_iterator_next </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/dd2/struct_m_x_p_s_q_l___m_p_a_r_c__iter__t.htm">MXPSQL_MPARC_iter_t</a> **&#160;</td>
          <td class="paramname"><em>iterator</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char **&#160;</td>
          <td class="paramname"><em>outnam</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Update the state of the iterator to point to the next one. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">iterator</td><td>the target iterator </td></tr>
    <tr><td class="paramname">outnam</td><td>output string </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err</dd></dl>
<p>If it returns KMPARC_NOEXIST, the iterator has reached the end </p>

</div>
</div>
<a id="a86d2ede0312cc1a4af72cb21dba21169" name="a86d2ede0312cc1a4af72cb21dba21169"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a86d2ede0312cc1a4af72cb21dba21169">&#9670;&#160;</a></span>MPARC_list_me_dir()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int MPARC_list_me_dir </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>path</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>recursive</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char ***&#160;</td>
          <td class="paramname"><em>output</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>ctx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>List whatever is in that directory. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">path</td><td>directory to list. If null, enters a check mode (returns 10 if not available, else 0 without doing anything) </td></tr>
    <tr><td class="paramname">recursive</td><td>recursively list the directory? </td></tr>
    <tr><td class="paramname">output</td><td>What is found there, excluding files. Guranteed to be null terminated. </td></tr>
    <tr><td class="paramname">ctx</td><td>context, unused </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>int Is it successful? Will return 10 if a fallback is used. 0 if successful, 1 if not.</dd></dl>
<dl class="section note"><dt>Note</dt><dd>unfinished </dd></dl>

</div>
</div>
<a id="a397599ed1504ab0b9ad7a5c945c359ba" name="a397599ed1504ab0b9ad7a5c945c359ba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a397599ed1504ab0b9ad7a5c945c359ba">&#9670;&#160;</a></span>MPARC_malloc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void * MPARC_malloc </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d08/mparc_8h.htm#a6dd4c5df4f9e32a9e863fc789ebaddfb">MXPSQL_MPARC_uint_repr_t</a>&#160;</td>
          <td class="paramname"><em>size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>My malloc, for easy plug and switch. Extensions should use this instead of malloc. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">size</td><td>size of bytes to allocate </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>void* allocated memory pointer</dd></dl>
<dl class="section note"><dt>Note</dt><dd>MPARC_malloc has its pitfalls. Don't fall for it. <br  />
 Right now is using C's malloc, so it is at the mercy of that function as malloc has flaws. <br  />
 Allocating a zero sized object with MPARC_Malloc, danger is from that it is implementation defined. </dd></dl>

</div>
</div>
<a id="a9dba6aa636c30ee35f2f4962a82e19b4" name="a9dba6aa636c30ee35f2f4962a82e19b4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9dba6aa636c30ee35f2f4962a82e19b4">&#9670;&#160;</a></span>MPARC_mkdirer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int MPARC_mkdirer </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>dir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>ctx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Make a directory. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">dir</td><td>directory to make. If null, enters a check mode (returns 10 if not available, else 0 without doing anything) </td></tr>
    <tr><td class="paramname">ctx</td><td>context, unused </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>int Is it successful? Will return 10 if a fallback is used. 0 if successful, 1 if not. </dd></dl>

</div>
</div>
<a id="aca83479a1ec5c46392d5d0891eecc6ca" name="aca83479a1ec5c46392d5d0891eecc6ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca83479a1ec5c46392d5d0891eecc6ca">&#9670;&#160;</a></span>MPARC_MXPSQL_MPARC_iter_t_sizeof()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t MPARC_MXPSQL_MPARC_iter_t_sizeof </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get sizeof <a class="el" href="../../d0/dd2/struct_m_x_p_s_q_l___m_p_a_r_c__iter__t.htm" title="Iterator.">MXPSQL_MPARC_iter_t</a>. </p>
<dl class="section return"><dt>Returns</dt><dd>size_t sizeof(MXPSQL_MPARC_iter_t)</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d0/dd2/struct_m_x_p_s_q_l___m_p_a_r_c__iter__t.htm" title="Iterator.">MXPSQL_MPARC_iter_t</a> </dd></dl>

</div>
</div>
<a id="a8ba40404c2a0ac26ee34350820770194" name="a8ba40404c2a0ac26ee34350820770194"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8ba40404c2a0ac26ee34350820770194">&#9670;&#160;</a></span>MPARC_MXPSQL_MPARC_t_sizeof()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t MPARC_MXPSQL_MPARC_t_sizeof </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get sizeof <a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm" title="Not the best place to find documentation for this struct, see mparc.h for better info....">MXPSQL_MPARC_t</a>. </p>
<dl class="section return"><dt>Returns</dt><dd>size_t sizeof(MXPSQL_MPARC_t)</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm" title="Not the best place to find documentation for this struct, see mparc.h for better info....">MXPSQL_MPARC_t</a> </dd></dl>

</div>
</div>
<a id="a329d8459e0d873adbafadb9969b5f392" name="a329d8459e0d873adbafadb9969b5f392"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a329d8459e0d873adbafadb9969b5f392">&#9670;&#160;</a></span>MPARC_parse_filename()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_parse_filename </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *&#160;</td>
          <td class="paramname"><em>structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Parse the archive file from the filename into the structure. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure </td></tr>
    <tr><td class="paramname">filename</td><td>the filename to read from </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err Did it parse well or did not </dd></dl>

</div>
</div>
<a id="a10a53d66991368ae2ae051f485d8a728" name="a10a53d66991368ae2ae051f485d8a728"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a10a53d66991368ae2ae051f485d8a728">&#9670;&#160;</a></span>MPARC_parse_filestream()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_parse_filestream </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *&#160;</td>
          <td class="paramname"><em>structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>fpstream</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Parse the opened file stream archive into the structure. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure </td></tr>
    <tr><td class="paramname">fpstream</td><td>the stream to read from, should be opened in "rb" mode </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err Did it parse well or did not </dd></dl>

</div>
</div>
<a id="a29a82ea12bfbf7210256c1264aedb091" name="a29a82ea12bfbf7210256c1264aedb091"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a29a82ea12bfbf7210256c1264aedb091">&#9670;&#160;</a></span>MPARC_parse_str()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_parse_str </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *&#160;</td>
          <td class="paramname"><em>structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>stringy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Parse the archive into the structure, a simpler version of MPARC_parse_str_advance. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure </td></tr>
    <tr><td class="paramname">stringy</td><td>the string to be parsed to </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err Did it parse well or did not</dd></dl>
<p>It is MPARC_parse_str_advance with the following options:</p>
<ul>
<li>Overwrite entries if duplicate found</li>
</ul>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d6/d08/mparc_8h.htm#a4c8cae502d2f392be252b78546ab274f" title="Parse the archive into the structure with extra flags.">MPARC_parse_str_advance</a> </dd></dl>

</div>
</div>
<a id="a6e0d911cce6085d4763c0d957dcef45e" name="a6e0d911cce6085d4763c0d957dcef45e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e0d911cce6085d4763c0d957dcef45e">&#9670;&#160;</a></span>MPARC_parse_str_advance()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_parse_str_advance </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *&#160;</td>
          <td class="paramname"><em>structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>stringy</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>erronduplicate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>sensitive</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Parse the archive into the structure with extra flags. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure </td></tr>
    <tr><td class="paramname">stringy</td><td>the string to be parsed to </td></tr>
    <tr><td class="paramname">erronduplicate</td><td>error with returning MPARC_KEXISTS if the key exists </td></tr>
    <tr><td class="paramname">sensitive</td><td>should it be standalone or can it be a polyglot? Allows steganography and Unicode with BOM parsing. Disclaimer: May possibly fail with a primitive lookup system (strrchr and strstr). </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err Did it parse well or did not </dd></dl>

</div>
</div>
<a id="a677f04c3376fd501c2d8aaa19f147984" name="a677f04c3376fd501c2d8aaa19f147984"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a677f04c3376fd501c2d8aaa19f147984">&#9670;&#160;</a></span>MPARC_peek_file()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_peek_file </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *&#160;</td>
          <td class="paramname"><em>structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char **&#160;</td>
          <td class="paramname"><em>bout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d08/mparc_8h.htm#a6dd4c5df4f9e32a9e863fc789ebaddfb">MXPSQL_MPARC_uint_repr_t</a> *&#160;</td>
          <td class="paramname"><em>sout</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Peek the contents of a file of the archive. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure </td></tr>
    <tr><td class="paramname">filename</td><td>the filename to peek the contents at </td></tr>
    <tr><td class="paramname">bout</td><td>the output pointer to a variable that represent the binary content of the file. Do not free this pointer;Its not your responsibility to do so. </td></tr>
    <tr><td class="paramname">sout</td><td>the output pointer to a variable that represent the size of bout </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err the status code if successfully done </dd></dl>

</div>
</div>
<a id="ae5d11cf031a7370f20dd6861746208df" name="ae5d11cf031a7370f20dd6861746208df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae5d11cf031a7370f20dd6861746208df">&#9670;&#160;</a></span>MPARC_perror()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int MPARC_perror </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td>
          <td class="paramname"><em>err</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Print the error message to stderr. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">err</td><td>error code </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>int Level of error</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d6/d08/mparc_8h.htm#a0d77b86222a2630f482dc038b149e553" title="Print the error message of your stream of choice.">MPARC_fperror</a> </dd></dl>

</div>
</div>
<a id="a1dd72fe09a33d45a0594e30c4de589c9" name="a1dd72fe09a33d45a0594e30c4de589c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1dd72fe09a33d45a0594e30c4de589c9">&#9670;&#160;</a></span>MPARC_pop_file()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_pop_file </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *&#160;</td>
          <td class="paramname"><em>structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Pop a file off the archive. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure </td></tr>
    <tr><td class="paramname">filename</td><td>the filename to pop off </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err the status code if successfully done </dd></dl>

</div>
</div>
<a id="a5e908a8e3a42c791c6863797af8935b5" name="a5e908a8e3a42c791c6863797af8935b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e908a8e3a42c791c6863797af8935b5">&#9670;&#160;</a></span>MPARC_push_filename()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_push_filename </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *&#160;</td>
          <td class="paramname"><em>structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Push a file read from the filesystem into the archive. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure </td></tr>
    <tr><td class="paramname">filename</td><td>the filename to read from </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err the status code if successfully done </dd></dl>

</div>
</div>
<a id="ab8028a20dc77814394bb16b58e4a93be" name="ab8028a20dc77814394bb16b58e4a93be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8028a20dc77814394bb16b58e4a93be">&#9670;&#160;</a></span>MPARC_push_filestr()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_push_filestr </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *&#160;</td>
          <td class="paramname"><em>structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>stringc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d08/mparc_8h.htm#a6dd4c5df4f9e32a9e863fc789ebaddfb">MXPSQL_MPARC_uint_repr_t</a>&#160;</td>
          <td class="paramname"><em>sizey</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Push a string as a file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure </td></tr>
    <tr><td class="paramname">filename</td><td>the filename to assign </td></tr>
    <tr><td class="paramname">stringc</td><td>the bytes of string </td></tr>
    <tr><td class="paramname">sizey</td><td>the size of stringc </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err the status code if successfully done </dd></dl>

</div>
</div>
<a id="a5ef974df9809818436802bf6e3a2588e" name="a5ef974df9809818436802bf6e3a2588e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ef974df9809818436802bf6e3a2588e">&#9670;&#160;</a></span>MPARC_push_filestream()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_push_filestream </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *&#160;</td>
          <td class="paramname"><em>structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>filestream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Push an active filestream into the archive as a file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure </td></tr>
    <tr><td class="paramname">filestream</td><td>the active filestream to read from, should be opened in "rb" mode </td></tr>
    <tr><td class="paramname">filename</td><td>the filename to assign </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err the status code if successfully done</dd></dl>
<dl class="section note"><dt>Note</dt><dd>filestream should be opened and closed manually </dd></dl>

</div>
</div>
<a id="a8639e49b467fd1322682fc75df57a83c" name="a8639e49b467fd1322682fc75df57a83c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8639e49b467fd1322682fc75df57a83c">&#9670;&#160;</a></span>MPARC_push_ufilestr()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_push_ufilestr </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *&#160;</td>
          <td class="paramname"><em>structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char *&#160;</td>
          <td class="paramname"><em>ustringc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d08/mparc_8h.htm#a6dd4c5df4f9e32a9e863fc789ebaddfb">MXPSQL_MPARC_uint_repr_t</a>&#160;</td>
          <td class="paramname"><em>sizy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Simple version of MPARC_push_ufilestr_advance that does not strip the directory name. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure </td></tr>
    <tr><td class="paramname">filename</td><td>the filename to assign </td></tr>
    <tr><td class="paramname">ustringc</td><td>the bytes of string </td></tr>
    <tr><td class="paramname">sizy</td><td>the size of ustringc </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err the status code if successfully done</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d6/d08/mparc_8h.htm#af8926502591fce41f1b6313e004df11c" title="Push an unsigned string as a file.">MPARC_push_ufilestr_advance</a> </dd></dl>

</div>
</div>
<a id="af8926502591fce41f1b6313e004df11c" name="af8926502591fce41f1b6313e004df11c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af8926502591fce41f1b6313e004df11c">&#9670;&#160;</a></span>MPARC_push_ufilestr_advance()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_push_ufilestr_advance </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *&#160;</td>
          <td class="paramname"><em>structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>stripdir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>overwrite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char *&#160;</td>
          <td class="paramname"><em>ustringc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d08/mparc_8h.htm#a6dd4c5df4f9e32a9e863fc789ebaddfb">MXPSQL_MPARC_uint_repr_t</a>&#160;</td>
          <td class="paramname"><em>sizy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Push an unsigned string as a file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure </td></tr>
    <tr><td class="paramname">filename</td><td>the filename to assign </td></tr>
    <tr><td class="paramname">stripdir</td><td>strip the directory from the filename </td></tr>
    <tr><td class="paramname">overwrite</td><td>overwrites the entry if it exists </td></tr>
    <tr><td class="paramname">ustringc</td><td>the bytes of string </td></tr>
    <tr><td class="paramname">sizy</td><td>the size of ustringc </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err the status code if successfully done</dd></dl>
<dl class="section note"><dt>Note</dt><dd>Filename only works on forward slash if stripdir is set due to basename only supporting that operation. </dd></dl>

</div>
</div>
<a id="a1e326d95791906a75532c4ef8be59d9a" name="a1e326d95791906a75532c4ef8be59d9a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e326d95791906a75532c4ef8be59d9a">&#9670;&#160;</a></span>MPARC_push_voidfile()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_push_voidfile </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *&#160;</td>
          <td class="paramname"><em>structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>buffer_guffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d08/mparc_8h.htm#a6dd4c5df4f9e32a9e863fc789ebaddfb">MXPSQL_MPARC_uint_repr_t</a>&#160;</td>
          <td class="paramname"><em>sizy</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Push a void pointer as a file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure </td></tr>
    <tr><td class="paramname">filename</td><td>the filename to assign </td></tr>
    <tr><td class="paramname">buffer_guffer</td><td>the void pointer </td></tr>
    <tr><td class="paramname">sizy</td><td>the size of buffer_guffer </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err the status code if successfully done </dd></dl>

</div>
</div>
<a id="a5cb6ee181b1984f1f5c74915971083b8" name="a5cb6ee181b1984f1f5c74915971083b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5cb6ee181b1984f1f5c74915971083b8">&#9670;&#160;</a></span>MPARC_readdir()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_readdir </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *&#160;</td>
          <td class="paramname"><em>structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>srcdir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>recursive</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int(*)(const char *, bool, char ***, void *)&#160;</td>
          <td class="paramname"><em>listdir</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>listdir_ctx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Read a directory into the structure. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure </td></tr>
    <tr><td class="paramname">srcdir</td><td>the source directory to read from </td></tr>
    <tr><td class="paramname">recursive</td><td>read from subdirectories if given true </td></tr>
    <tr><td class="paramname">listdir</td><td>function to list a directory, shall not be NULL or else it returns an error. This is the function that handles listing the file and recursion. </td></tr>
    <tr><td class="paramname">listdir_ctx</td><td>context value that is passed to the void* parameter of listdir </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err error status of reading</dd></dl>
<blockquote class="doxtable">
<p>&zwj;listdir Prototyping </p>
</blockquote>
<p>the first parameter of the listdir function is the current directory that should be read from</p>
<p>the second parameter indicates if it should be recursive, its a boolean</p>
<p>the third parameter is what files it has found, should be an array of string, terminated with NULL and Calloc'ed or Malloc'ed (pls Calloc it) (Also please use the MPARC allocation functions instead of the standard libc ones) as it relies on finding NULL and the array getting freed</p>
<p>the fourth parameter is context, it's user defined, is set by putting a value in the listdir_ctx parameter</p>
<p>the return value should always be 0 for success, other values indicate failure</p>
<p>Example for listdir (POSIX only for now, also to be continued): </p><div class="fragment"><div class="line"><span class="keywordtype">int</span> list_me_dir_recur(<span class="keyword">const</span> <span class="keywordtype">char</span>* path, <span class="keywordtype">bool</span> recursive, <span class="keywordtype">char</span>*** output, <span class="keywordtype">void</span>* ctx, <span class="keywordtype">size_t</span> block_size){</div>
<div class="line">    ((void)ctx);</div>
<div class="line">    DIR* dir;</div>
<div class="line">    <span class="keyword">struct </span>dirent* entry;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">if</span>(!(dir = opendir(path))) <span class="keywordflow">return</span> 1;</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">while</span>((entry = readdir(dir))){</div>
<div class="line">        <span class="keywordflow">if</span>(recursive){</div>
<div class="line">            <span class="keyword">struct </span>stat stet;</div>
<div class="line">            <span class="keywordflow">if</span>(stat(entry-&gt;d_name, &amp;statbuf) != 0) <span class="keywordflow">return</span> 1;</div>
<div class="line">            <span class="keywordflow">if</span>(S_ISDIR(stet.st_mode)){</div>
<div class="line">                <span class="comment">// TBA</span></div>
<div class="line">            }</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    closedir(dir);</div>
<div class="line"> </div>
<div class="line">    <span class="keywordflow">return</span> 0;</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> list_me_dir(<span class="keyword">const</span> <span class="keywordtype">char</span>* path, <span class="keywordtype">bool</span> recursive, <span class="keywordtype">char</span>*** output, <span class="keywordtype">void</span>* ctx){</div>
<div class="line">    <span class="keyword">static</span> <span class="keywordtype">size_t</span> bloc_size = 5;</div>
<div class="line">    <span class="keywordtype">char</span>** buff = <a class="code hl_function" href="../../d9/dd9/mparc_8c.htm#ab23a5170998401c4b3852fe54d4374a3">MPARC_calloc</a>(5, <span class="keyword">sizeof</span>(<span class="keywordtype">char</span>*));</div>
<div class="line">    *output</div>
<div class="line">    <span class="keywordflow">return</span> list_me_dir_recur(path, recursive, buff, ctx, block_size);</div>
<div class="line">}</div>
<div class="ttc" id="amparc_8c_htm_ab23a5170998401c4b3852fe54d4374a3"><div class="ttname"><a href="../../d9/dd9/mparc_8c.htm#ab23a5170998401c4b3852fe54d4374a3">MPARC_calloc</a></div><div class="ttdeci">void * MPARC_calloc(MXPSQL_MPARC_uint_repr_t arr_size, size_t el_size)</div><div class="ttdoc">My calloc, for easy plug and switch. Extensions should use this instead of calloc.</div><div class="ttdef"><b>Definition:</b> mparc.c:6596</div></div>
</div><!-- fragment --> 
</div>
</div>
<a id="a1bbdf1d27c7dbf8c222535770fb5323f" name="a1bbdf1d27c7dbf8c222535770fb5323f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1bbdf1d27c7dbf8c222535770fb5323f">&#9670;&#160;</a></span>MPARC_realloc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void * MPARC_realloc </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>oldmem</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d6/d08/mparc_8h.htm#a6dd4c5df4f9e32a9e863fc789ebaddfb">MXPSQL_MPARC_uint_repr_t</a>&#160;</td>
          <td class="paramname"><em>newsize</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>My realloc, for easy plug and switch. Extensions should use this instead of realloc. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">oldmem</td><td>old memory to change size </td></tr>
    <tr><td class="paramname">newsize</td><td>new size </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>void* reallocated memory pointer</dd></dl>
<dl class="section note"><dt>Note</dt><dd></dd></dl>
<p>MPARC_realloc has its pitfalls. Don't fall for it. <br  />
 Right now is using C's realloc, so it is at the mercy of that function as realloc has flaws. <br  />
 Common one: <br  />
 In place realloc, danger is from when it errors out and now you created a memory leak. <br  />
 Reusing old realloc pointers, danger is that it may have been invalidated. <br  />
 Allocating a zero sized object with MPARC_realloc, danger is that it used to be implementation defined before C23, after C23 is now undefined behaviour. </p>

</div>
</div>
<a id="ad19d14cc148f3b983b1c3a8f38d6720d" name="ad19d14cc148f3b983b1c3a8f38d6720d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad19d14cc148f3b983b1c3a8f38d6720d">&#9670;&#160;</a></span>MPARC_rename_file()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_rename_file </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *&#160;</td>
          <td class="paramname"><em>structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>overwrite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>oldname</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>newname</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Rename an entry. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure </td></tr>
    <tr><td class="paramname">overwrite</td><td>Overwrite an entry? </td></tr>
    <tr><td class="paramname">oldname</td><td>the file you want to change name </td></tr>
    <tr><td class="paramname">newname</td><td>the new name </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err the sttaus code if successfully done. MPARC_KNOEXIST if oldname is not there and more...</dd></dl>
<p>Internally implemented with MPARC_push_ufilestr, MPARC_pop_file and MPARC_peek_file </p>

</div>
</div>
<a id="acb33c06446b2c32a15eaead47728808c" name="acb33c06446b2c32a15eaead47728808c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb33c06446b2c32a15eaead47728808c">&#9670;&#160;</a></span>MPARC_sfperror()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int MPARC_sfperror </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td>
          <td class="paramname"><em>err</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FILE *&#160;</td>
          <td class="paramname"><em>filepstream</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>emsg</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Print the error message to your stream of choice with a message of your choice. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">err</td><td>error code </td></tr>
    <tr><td class="paramname">filepstream</td><td>stream of your choice </td></tr>
    <tr><td class="paramname">emsg</td><td>message of your choice </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>int Level of error</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d6/d08/mparc_8h.htm#a499191b4f97ceb2791a4861cd493b9d4" title="Get error string from MXPSQL_MPARC_err.">MPARC_strerror</a> </dd></dl>

</div>
</div>
<a id="a499191b4f97ceb2791a4861cd493b9d4" name="a499191b4f97ceb2791a4861cd493b9d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a499191b4f97ceb2791a4861cd493b9d4">&#9670;&#160;</a></span>MPARC_strerror()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int MPARC_strerror </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a>&#160;</td>
          <td class="paramname"><em>err</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char **&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get error string from MXPSQL_MPARC_err. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">err</td><td>error code </td></tr>
    <tr><td class="paramname">out</td><td>output error string, can be NULL if an error occured </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>int Level of error (-1 for invalid, 0 for normal, 1 for special, 2 for serious conditions) </dd></dl>

</div>
</div>
<a id="afd013dd1d48216d0e879e9923adaa47a" name="afd013dd1d48216d0e879e9923adaa47a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afd013dd1d48216d0e879e9923adaa47a">&#9670;&#160;</a></span>MPARC_swap_file()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d6/d08/mparc_8h.htm#ab94170c55bb379cd60ae08c6bb68100c">MXPSQL_MPARC_err</a> MPARC_swap_file </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d4a/struct_m_x_p_s_q_l___m_p_a_r_c__t.htm">MXPSQL_MPARC_t</a> *&#160;</td>
          <td class="paramname"><em>structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>file2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Swap 2 entries. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">structure</td><td>the target structure. </td></tr>
    <tr><td class="paramname">file1</td><td>the filename to swap with file2. Also a swap victim </td></tr>
    <tr><td class="paramname">file2</td><td>the filename to swap with file1. Also a swap victim </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>MXPSQL_MPARC_err Lazy.</dd></dl>
<p>Internally implemnted with MPARC_push_ufilestr and MPARC_peek_file </p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_97aefd0d527b934f1d99a682da8fe6a9.htm">lib</a></li><li class="navelem"><a class="el" href="../../d9/dd9/mparc_8c.htm">mparc.c</a></li>
    <li class="footer">Generated on Wed Feb 1 2023 20:43:42 for MPARC by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.6 </li>
  </ul>
</div>
</body>
</html>
